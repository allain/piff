fn hello() {
  print('Hello, World!')
}

hello()

fn ten() {
  return 10
}

fn add(a,b) {
  return a + b
}

// anonymous functions
hello2 = fn () {
  print('Hello, World!')
}
hello2()

// invoking function as argument does not add semicolon'
print(ten())

// anonymous functions with params work', t => {
add2 = fn(a,b) { return a + b }
print(add2(1,2))

// variables in outer scope are used
x1 = 10
test = fn() { return x1 }

// variables in outer scope are not used param overrides it
test2 = fn(x1) { return x1 }
print(test2(20))

// locally assigned variables do not get declared as global
test3 = fn() { x = 10; print(x) }
test3()

// invoking anonymous function is considered a global variable',
hi = fn() { print("hi") }
hi()

// deep nesting of anonymous functions uses properly
x4 = 10;
y4 = 20;
test4 = fn () {
  z = fn() {
    return x4
  }

  return y4 + z()
}