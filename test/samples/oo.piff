fn println(msg) {
  print(msg + "\n")
}

class Root {

}

class Test2 extends Root implements Serializable {
  serialize(value) {

  }

  unserialize(value) {

  }
}

class Test extends Root {
  sum = 0

  static val = 10

  add10() {
    x = fn() {
      println('anonymous functions work in methods too')
    }
    x()
    return @add(10)
  }

  private priv(a,b) {
    println('here?')
  }

  add(n) {
    return @sum += n
  }

  chained() {
    println('chained')
    return @
  }

  static blah() {
    println('static blah')
  }

  blah2() {
    // Invoking static from non-static works
    @@::blah()
  }
}

t = new Test
println("instanceof " + (t instanceof Root))
t->add(10)
t->add(20)
t->add10()

t->chained()->chained()
println(t->sum)

println('static tests')
Test::blah()
t->blah2()
println('Test::val ' + Test::val)

