class Event extends TranslatableRecord {
  STATUS_DELETED = 0
  STATUS_UNPUBLISHED = 1
  STATUS_PUBLISHED = 2

  /*@start_date
  @start_hour
  @start_minute
  @start_ampm
  @has_end
  @end_dat
  @end_hour
  @end_minute
  @end_ampm
  @videoUrl
  @repeats*/

  rules() {
    rules = [
      [
        'sponsorIds',
        'safe',
        'except': 'api',
      ]
    ]

    return array_merge(rules, parent::rules())
  }

  relations() {
    relations = [
      'festival': [
        BELONGS_TO,
        'Festival',
        'festivalId'
      ]
    ]

    return array_merge(relations, parent())
  }

  attributeLabels() {
    labels = [
      id: 'ID',
      festivalId: 'Festival',
      placeId: 'Place',
      creatorId: 'Creator',
      start: 'Start',
      fullDay: 'All Day Event',
      lastUpdated: 'Last Updated',
      status: 'Status',
      start_date: 'Date',
      start_hour: 'Hour',
      start_minute: 'Minute',
      end_hour: 'Hour',
      end_minute: 'Minute',
      fr_title: 'Titre',
      start_time: 'Start Time',
      end_time: 'End Time',
      tagStrip: 'Tags',
      sponsorIds: 'Sponsor Ids',
      ticketPackageId: 'Ticket Package',
      protected: 'Protect from scraper updates',
      qrValue: 'QR Code Value',
      repeatUntilDay: 'Repeat Until Date',
    ]

    return array_merge(parent(), labels)
  }

  beforeSave() {
    parentSaved = parent()

    @populateStart()
    @populateEnd()

    return parentSaved
  }

  init() {
    @start_hour = '0'
    @start_ampm = 'pm'
    @end_hour = '0'
    @end_ampm = 'pm'
    @status = self::STATUS_PUBLISHED
  }

  defaultScope() {
    if (!Festival::getRequestedId()) {
      return []
    }

    if (parentFestivalId = Festival::getParentIdOf(Festival::getRequestedId())) {
      return [
        condition: @getTableAlias(true, false) + '.festivalId=:festivalId OR ' + getTableAlias(true,
            false) + '.festivalId=:parentFestivalId',
        params: [
          ':festivalId': Festival::getRequestedId(),
          ':parentFestivalId': $parentFestivalId,
        ],
        order: @getTableAlias(false, false) + '.start ASC',
      ]
    }

    return [
      condition: @getTableAlias(true, false) + '.festivalId=:festivalId',
      params: [':festivalId': Festival::getRequestedId()],
      order: @getTableAlias(false, false)+'.start ASC',
    ]
  }

  getDirectory() {
    throwIf(!@festivalId || !@id, 'Directory cannot be determined for an unsaved Event')

    return Yii::app()->basePath + '/../files/festival/' + @festivalId + '/event/' + @id
  }
}
